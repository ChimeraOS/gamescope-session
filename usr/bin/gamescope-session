#!/bin/sh

# Some environment variables by default (taken from Deck session)
export SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS=0

# Enable Mangoapp
export STEAM_USE_MANGOAPP=1
export MANGOAPP=1

# Enable volume key management via steam for this session
export STEAM_ENABLE_VOLUME_HANDLER=1

# Have SteamRT's xdg-open send http:// and https:// URLs to Steam
export SRT_URLOPEN_PREFER_STEAM=1

# Disable automatic audio device switching in steam, now handled by wireplumber
export STEAM_DISABLE_AUDIO_DEVICE_SWITCHING=1

# Enable support for xwayland isolation per-game in Steam
export STEAM_MULTIPLE_XWAYLANDS=1

# Don't wait for buffers to idle on the client side before sending them to gamescope
export vk_xwayland_wait_ready=false

# Source environment from ~/.config/environment.d
set -a
for i in "${HOME}"/.config/environment.d/*.conf ;
do
    [[ -f "${i}" ]] && . "${i}"
done
set +a

# Setup socket for gamescope
# Create run directory file for startup and stats sockets
tmpdir="$([[ -n ${XDG_RUNTIME_DIR+x} ]] && mktemp -p "$XDG_RUNTIME_DIR" -d -t gamescope.XXXXXXX)"
socket="${tmpdir:+$tmpdir/startup.socket}"
# Fail early if we don't have a proper runtime directory setup
if [[ -z $tmpdir || -z ${XDG_RUNTIME_DIR+x} ]]; then
	echo >&2 "!! Failed to find run directory in which to create stats session sockets (is \$XDG_RUNTIME_DIR set?)"
	exit 0
fi

mkfifo -- "$socket"

# Use cursor if file exist
if [ -z "$CURSOR_FILE" ] ; then
    CURSOR_FILE="${HOME}/.local/share/Steam/tenfoot/resource/images/cursors/arrow_right.png"
fi
CURSOR=""
if [ -f "$CURSOR_FILE" ] ; then
    CURSOR="--cursor ${CURSOR_FILE}"
fi

# Define session if not overriden
if [ -z "$STEAMCMD" ] ; then
    STEAMCMD="steam -tenfoot -steamos -pipewire-dmabuf"
    # Check beta branch and select prefered UI
    STEAM_BETA_FILE="${HOME}/.local/share/Steam/package/beta"
    if [ -f "$STEAM_BETA_FILE" ] ; then
        BETA=$(cat "${STEAM_BETA_FILE}")
        if [[ $BETA =~ steampal ]] ; then
            STEAMCMD="steam -gamepadui -steamos3 -steampal -steamdeck"
        fi
    fi
fi
if [ -z "$GAMESCOPECMD" ] ; then
    RESOLUTION=""
    if [ -n "$SCREEN_WIDTH" ] && [ -n "$SCREEN_HEIGHT" ] ; then
        RESOLUTION="-W $SCREEN_WIDTH -H $SCREEN_HEIGHT"
    fi
    GAMESCOPECMD="/usr/bin/gamescope \
      $CURSOR \
      -e \
      -R "$socket" \
      $RESOLUTION \
      --xwayland-count 2"
else
    # Add socket read
    GAMESCOPECMD+=" -R $socket"
fi

# Workaround for Steam login issue while Steam client change propagates out of Beta
touch "${HOME}"/.steam/root/config/SteamAppData.vdf || true

# Log rotate the last session
if [ -f "${HOME}"/.steam-tweaks.log ]; then
    cp "${HOME}"/.steam-tweaks.log "${HOME}"/.steam-tweaks.log.old
fi
if [ -f "${HOME}"/.steam-stdout.log ]; then
    cp "${HOME}"/.steam-stdout.log "${HOME}"/.steam-stdout.log.old
fi
if [ -f "${HOME}"/.gamescope-stdout.log ]; then
    cp "${HOME}"/.gamescope-stdout.log "${HOME}"/.gamescope-stdout.log.old
fi

# Run steam-tweaks if exists
if command -v steam-tweaks > /dev/null; then
    steam-tweaks > "${HOME}"/.steam-tweaks.log
fi

# Start gamescope compositor, log it's output and background it
$GAMESCOPECMD > "${HOME}"/.gamescope-stdout.log 2>&1 &
gamescope_pid="$!"

if read -r -t 3 response_x_display response_wl_display <> "$socket"; then
	export DISPLAY="$response_x_display"
	export GAMESCOPE_WAYLAND_DISPLAY="$response_wl_display"
	# We're done!
else
	kill -9 "$gamescope_pid"
	wait
	exit 0
	# Systemd or Session manager will have to restart session
fi

# If we have mangoapp binary start it
if command -v mangoapp > /dev/null; then
    mangoapp &
fi

# Start Steam client
$STEAMCMD > "${HOME}"/.steam-stdout.log 2>&1

# When the client exits, kill gamescope nicely
kill $gamescope_pid

# Start a background sleep for five seconds because we don't trust it
sleep 5 &
sleep_pid="$!"

# Wait for gamescope or the sleep to finish for timeout purposes
ret=0
wait -n $gamescope_pid $sleep_pid || ret=$?

# If we get a SIGTERM/etc while waiting this happens.  Proceed to kill -9 everything but complain
if [[ $ret = 127 ]]; then
	echo >&2 "gamescope-session: Interrupted while waiting on teardown, force-killing remaining tasks"
fi

# Kill all remaining jobs and warn if unexpected things are in there (should be just sleep_pid, unless gamescope failed
# to exit in time or we hit the interrupt case above)
for job in $(jobs -p); do
	# Warn about unexpected things
	if [[ $ret != 127 && $job = "$gamescope_pid" ]]; then
		echo >&2 "gamescope-session: gamescope timed out while exiting, killing"
	elif [[ $ret != 127 && $job != "$sleep_pid" ]]; then
		echo >&2 "gamescope-session: unexpected background pid $job at teardown: "
		# spew some debug about it
		ps -p "$job" >&2
	fi
	kill -9 "$job"
done

